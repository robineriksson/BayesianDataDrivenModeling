% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Estimators.R
\name{SLMCMC}
\alias{SLMCMC}
\title{--------------------------------------------------------------
Algortihm:
n <- 1
t <- init parameter
d <- simulate nSim data with (t)
ss <- summary statistics
sl <- compute synthetic likelihood. (ss matrix)
While  n < Nstop
--- t' <- propose parameters using Kernel K(t'|t)
--- d <- simulate nSim data with (t)
--- s <- transform into summary statistics(d)
--- sl' <- compute synthetic likelihood (s matrix)
--- a <- min(1, exp(sl' - sl))
--- u <- U[0,1]
--- if(u < a)
--- --- store t in theta
--- --- t <- t'
--- --- sl <- sl'
--- --- n <- n + 1
--- else
--- --- n <- n
--- ---
return theta
--------------------------------------------------------------
SLMCMC estimator. Will perfome
Computes the synthetic likelihood (SL) (Wood 2010) and the performes a Metropolis-Hasting algortihm
with SL instead of the true likelihood}
\usage{
SLMCMC(observation, Simulator, SummaryStatistics, Proposal, extraArgsEstimator,
  extraArgsSimulator, extraArgsSummaryStatistics, extraArgsProposal)
}
\arguments{
\item{observation}{Observed data, that parameters are to be fit to.}

\item{Simulator}{(function) Model simulator. Theta dependent.}

\item{SummaryStatistics}{(function) transformer of the output data from the simulator. Output is a vector.}

\item{Proposal}{proposal functions for the parameters.}

\item{extraArgsEstimator}{extra argruments for the estimator: nStop, nSim, debug}

\item{extraArgsSimulator}{extra arguments for Simulator}

\item{extraArgsSummaryStatistics}{extra arguments for summary statistics transformer.}

\item{extraArgsProposal}{extra arguments for the proposal function}
}
\value{
samples from the posterior distribution.
}
\description{
--------------------------------------------------------------
Algortihm:
n <- 1
t <- init parameter
d <- simulate nSim data with (t)
ss <- summary statistics
sl <- compute synthetic likelihood. (ss matrix)
While  n < Nstop
--- t' <- propose parameters using Kernel K(t'|t)
--- d <- simulate nSim data with (t)
--- s <- transform into summary statistics(d)
--- sl' <- compute synthetic likelihood (s matrix)
--- a <- min(1, exp(sl' - sl))
--- u <- U[0,1]
--- if(u < a)
--- --- store t in theta
--- --- t <- t'
--- --- sl <- sl'
--- --- n <- n + 1
--- else
--- --- n <- n
--- ---
return theta
--------------------------------------------------------------
SLMCMC estimator. Will perfome
Computes the synthetic likelihood (SL) (Wood 2010) and the performes a Metropolis-Hasting algortihm
with SL instead of the true likelihood
}
